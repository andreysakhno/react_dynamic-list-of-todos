{"version":3,"sources":["libs/enums/Filters.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","libs/helpers/getPreparedTodos.ts","index.tsx"],"names":["Filters","TodoItem","item","selectedId","onSelect","id","title","completed","isSelected","className","classNames","type","onClick","TodoList","todos","map","TodoFilter","onSelectFilter","onEnterQuery","useState","All","selectedFilter","setSelectedFilter","query","setQuery","options","Object","entries","key","value","onChange","event","selected","target","placeholder","enteredQuery","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","todo","onClose","user","setUser","loading","setLoading","userId","statusMessage","useEffect","getUser","finally","href","email","name","App","setTodos","selectedTodo","setSelectedTodo","filter","setFilter","visibleTodos","useMemo","preparedTodos","prepearedQuery","trim","toLowerCase","includes","Active","Completed","getPreparedTodos","handleSelectTodo","useCallback","handleDeselectTodo","handleSelectFilter","handleEnterQuery","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f77e3e1c.chunk.js","sourcesContent":["export enum Filters {\n  Active = 'active',\n  Completed = 'completed',\n  All = 'all',\n}\n","import classNames from 'classnames';\nimport { Todo } from '../../libs/types/Todo';\n\ntype Props = {\n  item: Todo,\n  selectedId?: number,\n  onSelect: (todo: Todo) => void,\n};\n\nexport const TodoItem: React.FC<Props> = ({ item, selectedId, onSelect }) => {\n  const { id, title, completed } = item;\n\n  const isSelected = selectedId === id;\n\n  const handleSelect = () => {\n    onSelect(item);\n  };\n\n  return (\n    <tr data-cy=\"todo\">\n      <td className=\"is-vcentered\">\n        {id}\n      </td>\n\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n\n      <td className=\"is-vcentered is-expanded\">\n        <p className={classNames({\n          'has-text-danger': !completed,\n          'has-text-success': completed,\n        })}\n        >\n          { title }\n        </p>\n      </td>\n\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={handleSelect}\n        >\n          <span className=\"icon\">\n            <i className={classNames('far', {\n              'fa-eye': !isSelected,\n              'fa-eye-slash': isSelected,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../libs/types/Todo';\nimport { TodoItem } from '../TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  selectedId?: number,\n  onSelect: (todo: Todo) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ todos, selectedId, onSelect }) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(item => (\n        <TodoItem\n          key={item.id}\n          item={item}\n          selectedId={selectedId}\n          onSelect={onSelect}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { useState } from 'react';\nimport { Filters } from '../../libs/enums';\n\ntype Props = {\n  onSelectFilter: (filter: Filters) => void;\n  onEnterQuery: (query: string) => void;\n};\n\nexport const TodoFilter: React.FC<Props> = ({\n  onSelectFilter,\n  onEnterQuery,\n}) => {\n  const [selectedFilter, setSelectedFilter] = useState(Filters.All);\n  const [query, setQuery] = useState('');\n\n  const handleFilterChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const selected = event.target.value as Filters;\n\n    setSelectedFilter(selected);\n    onSelectFilter(selected);\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const enteredQuery = event.target.value;\n\n    setQuery(enteredQuery);\n    onEnterQuery(enteredQuery);\n  };\n\n  const handleQueryClear = () => {\n    setQuery('');\n    onEnterQuery('');\n  };\n\n  const options = Object.entries(Filters).map(([key, value]) => (\n    <option key={value} value={value}>\n      {key}\n    </option>\n  ));\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={selectedFilter}\n            onChange={handleFilterChange}\n          >\n            {options}\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleQueryClear}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './libs/types/Todo';\nimport { User } from './libs/types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\n// This function creates a promise\n// that is resolved after a given delay\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  // we add some delay to see how the loader works\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { Loader } from '../Loader';\nimport { Todo } from '../../libs/types/Todo';\nimport { getUser } from '../../api';\nimport { User } from '../../libs/types/User';\n\ntype Props = {\n  todo: Todo,\n  onClose: () => void,\n};\n\nexport const TodoModal: React.FC<Props> = ({ todo, onClose }) => {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  const {\n    id,\n    userId,\n    title,\n    completed,\n  } = todo;\n\n  const statusMessage = completed ? 'Done' : 'Planned';\n\n  useEffect(() => {\n    getUser(userId)\n      .then(setUser)\n      .finally(() => setLoading(false));\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={onClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            {user && (\n              <p className=\"block\" data-cy=\"modal-user\">\n                {/* <strong className=\"has-text-success\">Done</strong> */}\n                <strong className={classNames({\n                  'has-text-danger': !completed,\n                  'has-text-success': completed,\n                })}\n                >\n                  {statusMessage}\n                </strong>\n\n                {' by '}\n\n                <a href={`mailto:${user.email}`}>\n                  {user.name}\n                </a>\n              </p>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport {\n  useCallback,\n  useEffect,\n  useState,\n  useMemo,\n} from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { Todo } from './libs/types/Todo';\nimport { getTodos } from './api';\nimport { Filters } from './libs/enums';\nimport { getPreparedTodos } from './libs/helpers';\n\nexport const App: React.FC = () => {\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState<Todo | null>(null);\n  const [query, setQuery] = useState('');\n  const [filter, setFilter] = useState(Filters.All);\n\n  const visibleTodos = useMemo(\n    () => getPreparedTodos(todos, { filter, query }),\n    [filter, query, todos],\n  );\n\n  useEffect(() => {\n    setLoading(true);\n\n    getTodos()\n      .then(setTodos)\n      .finally(() => {\n        setLoading(false);\n      });\n  }, []);\n\n  const handleSelectTodo = useCallback((todo) => {\n    setSelectedTodo(todo);\n  }, []);\n\n  const handleDeselectTodo = useCallback(() => {\n    setSelectedTodo(null);\n  }, []);\n\n  const handleSelectFilter = useCallback((selectedFilter) => {\n    setFilter(selectedFilter);\n  }, []);\n\n  const handleEnterQuery = useCallback((enteredQuery) => {\n    setQuery(enteredQuery);\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                onSelectFilter={handleSelectFilter}\n                onEnterQuery={handleEnterQuery}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && <Loader />}\n              <TodoList\n                todos={visibleTodos}\n                selectedId={selectedTodo?.id}\n                onSelect={handleSelectTodo}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {selectedTodo && (\n        <TodoModal\n          todo={selectedTodo}\n          onClose={handleDeselectTodo}\n        />\n      )}\n    </>\n  );\n};\n","import { Filters } from '../enums';\nimport { Todo } from '../types/Todo';\n\ntype SearchParams = {\n  query?: string,\n  filter?: Filters,\n};\n\nexport const getPreparedTodos = (\n  todos: Todo[],\n  { query, filter }: SearchParams,\n): Todo[] => {\n  let preparedTodos = [...todos];\n\n  if (query) {\n    const prepearedQuery = query.trim().toLowerCase();\n\n    preparedTodos = preparedTodos.filter(todo => (\n      todo.title.toLowerCase().includes(prepearedQuery)\n    ));\n  }\n\n  if (filter) {\n    preparedTodos = preparedTodos.filter(todo => {\n      switch (filter) {\n        case Filters.Active:\n          return !todo.completed;\n\n        case Filters.Completed:\n          return todo.completed;\n\n        default:\n          return todo;\n      }\n    });\n  }\n\n  return preparedTodos;\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}